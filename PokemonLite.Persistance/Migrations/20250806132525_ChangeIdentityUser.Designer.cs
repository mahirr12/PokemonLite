// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PokemonLite.Persistance.DataBase;

#nullable disable

namespace PokemonLite.Persistance.Migrations
{
    [DbContext(typeof(PokemonDBContext))]
    [Migration("20250806132525_ChangeIdentityUser")]
    partial class ChangeIdentityUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.AbilityLevel", b =>
                {
                    b.Property<Guid>("PokemonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BaseAbilityId")
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("PokemonId", "BaseAbilityId");

                    b.HasIndex("BaseAbilityId");

                    b.ToTable("AbilityLevels");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.BaseAbility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SpecieId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TrainerPokemonId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SpecieId");

                    b.HasIndex("TrainerPokemonId");

                    b.ToTable("BaseAbilities", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.Battle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("JoinerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("JoinerId");

                    b.ToTable("Battles");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.BattleTrainerPokemon", b =>
                {
                    b.Property<Guid>("BattleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrainerPokemonId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCreatorPokemon")
                        .HasColumnType("boolean");

                    b.HasKey("BattleId", "TrainerPokemonId");

                    b.HasIndex("TrainerPokemonId");

                    b.ToTable("BattleTrainerPokemon");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.Pokemon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BaseAttack")
                        .HasColumnType("integer");

                    b.Property<int>("BaseDefense")
                        .HasColumnType("integer");

                    b.Property<int>("BaseHp")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Pokemons");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.PokemonAssignAbility", b =>
                {
                    b.Property<Guid>("TrainerPokemonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AbilityId")
                        .HasColumnType("uuid");

                    b.HasKey("TrainerPokemonId", "AbilityId");

                    b.HasIndex("AbilityId");

                    b.ToTable("PokemonAssignAbilities");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.Specie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.SpecieEffectiveness", b =>
                {
                    b.Property<Guid>("AttackingSpecieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DefendingSpecieId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("AttackingSpecieId", "DefendingSpecieId");

                    b.HasIndex("DefendingSpecieId");

                    b.ToTable("SpecieEffectivenesses");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.Trainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.TrainerPokemon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentAttack")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentDefense")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentHp")
                        .HasColumnType("integer");

                    b.Property<int>("Exp")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShiny")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PokemonId")
                        .HasColumnType("uuid");

                    b.Property<int>("PokemonType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TrainerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerPokemons");
                });

            modelBuilder.Entity("PokemonLite.Persistance.Implementations.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PokemonSpecie", b =>
                {
                    b.Property<Guid>("PokemonsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpeciesId")
                        .HasColumnType("uuid");

                    b.HasKey("PokemonsId", "SpeciesId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("PokemonSpecie");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.ActiveAbility", b =>
                {
                    b.HasBaseType("PokemonLite.Domain.Entities.BaseAbility");

                    b.Property<int>("Cooldown")
                        .HasColumnType("integer");

                    b.Property<int[]>("Effectiveness")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.ToTable("ActiveAbilities", (string)null);
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.PassiveAbility", b =>
                {
                    b.HasBaseType("PokemonLite.Domain.Entities.BaseAbility");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int[]>("OpponentEffectiveness")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int[]>("OwnEffectiveness")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.ToTable("PassiveAbilities", (string)null);
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.StatusAbility", b =>
                {
                    b.HasBaseType("PokemonLite.Domain.Entities.BaseAbility");

                    b.Property<int>("StatusAbilityType")
                        .HasColumnType("integer");

                    b.Property<int[]>("StatusEffectiveness")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.ToTable("StatusAbilities", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PokemonLite.Persistance.Implementations.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PokemonLite.Persistance.Implementations.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonLite.Persistance.Implementations.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PokemonLite.Persistance.Implementations.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.AbilityLevel", b =>
                {
                    b.HasOne("PokemonLite.Domain.Entities.BaseAbility", "BaseAbility")
                        .WithMany("AbilityLevels")
                        .HasForeignKey("BaseAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonLite.Domain.Entities.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseAbility");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.BaseAbility", b =>
                {
                    b.HasOne("PokemonLite.Domain.Entities.Specie", "Specie")
                        .WithMany()
                        .HasForeignKey("SpecieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonLite.Domain.Entities.TrainerPokemon", null)
                        .WithMany("Abilities")
                        .HasForeignKey("TrainerPokemonId");

                    b.Navigation("Specie");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.Battle", b =>
                {
                    b.HasOne("PokemonLite.Domain.Entities.Trainer", "Creator")
                        .WithMany("CreatedBattles")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PokemonLite.Domain.Entities.Trainer", "Joiner")
                        .WithMany("JoinedBattles")
                        .HasForeignKey("JoinerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Joiner");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.BattleTrainerPokemon", b =>
                {
                    b.HasOne("PokemonLite.Domain.Entities.Battle", "Battle")
                        .WithMany("Pokemons")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonLite.Domain.Entities.TrainerPokemon", "TrainerPokemon")
                        .WithMany("Battles")
                        .HasForeignKey("TrainerPokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battle");

                    b.Navigation("TrainerPokemon");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.PokemonAssignAbility", b =>
                {
                    b.HasOne("PokemonLite.Domain.Entities.BaseAbility", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonLite.Domain.Entities.TrainerPokemon", "TrainerPokemon")
                        .WithMany("PokemonAssignAbilities")
                        .HasForeignKey("TrainerPokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("TrainerPokemon");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.SpecieEffectiveness", b =>
                {
                    b.HasOne("PokemonLite.Domain.Entities.Specie", "AttackingSpecie")
                        .WithMany()
                        .HasForeignKey("AttackingSpecieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonLite.Domain.Entities.Specie", "DefendingSpecie")
                        .WithMany()
                        .HasForeignKey("DefendingSpecieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttackingSpecie");

                    b.Navigation("DefendingSpecie");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.Trainer", b =>
                {
                    b.HasOne("PokemonLite.Persistance.Implementations.User", "User")
                        .WithOne("Trainer")
                        .HasForeignKey("PokemonLite.Domain.Entities.Trainer", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.TrainerPokemon", b =>
                {
                    b.HasOne("PokemonLite.Domain.Entities.Pokemon", "Pokemon")
                        .WithMany("TrainerPokemons")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonLite.Domain.Entities.Trainer", "Trainer")
                        .WithMany("TrainerPokemons")
                        .HasForeignKey("TrainerId");

                    b.Navigation("Pokemon");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("PokemonSpecie", b =>
                {
                    b.HasOne("PokemonLite.Domain.Entities.Pokemon", null)
                        .WithMany()
                        .HasForeignKey("PokemonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonLite.Domain.Entities.Specie", null)
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.ActiveAbility", b =>
                {
                    b.HasOne("PokemonLite.Domain.Entities.BaseAbility", null)
                        .WithOne()
                        .HasForeignKey("PokemonLite.Domain.Entities.ActiveAbility", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.PassiveAbility", b =>
                {
                    b.HasOne("PokemonLite.Domain.Entities.BaseAbility", null)
                        .WithOne()
                        .HasForeignKey("PokemonLite.Domain.Entities.PassiveAbility", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.StatusAbility", b =>
                {
                    b.HasOne("PokemonLite.Domain.Entities.BaseAbility", null)
                        .WithOne()
                        .HasForeignKey("PokemonLite.Domain.Entities.StatusAbility", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.BaseAbility", b =>
                {
                    b.Navigation("AbilityLevels");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.Battle", b =>
                {
                    b.Navigation("Pokemons");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.Pokemon", b =>
                {
                    b.Navigation("TrainerPokemons");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.Trainer", b =>
                {
                    b.Navigation("CreatedBattles");

                    b.Navigation("JoinedBattles");

                    b.Navigation("TrainerPokemons");
                });

            modelBuilder.Entity("PokemonLite.Domain.Entities.TrainerPokemon", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Battles");

                    b.Navigation("PokemonAssignAbilities");
                });

            modelBuilder.Entity("PokemonLite.Persistance.Implementations.User", b =>
                {
                    b.Navigation("Trainer");
                });
#pragma warning restore 612, 618
        }
    }
}
